openapi: 3.0.0
paths:
  /v1/pools/:
    get:
      summary: Return the list of managed pools
      description: "Return description of all of managed pools\n"
      tags:
      - pools
      responses:
        '200':
          description: "Returns the list of all registered pools\n"
          content:
            application/json:
              schema:
                $ref: '#/definitions/PoolListResponse'
  /v1/pools:
    patch:
      summary: Resynchronize all pools
      description: "Resynchronize all pools with their backends.\n\nThis is necessary
        when rescaling backends services\nor adding new monitored pools.\n"
      tags:
      - pools
      responses:
        '200':
          description: "Returns the list of all registered pools\n"
          content:
            application/json:
              schema:
                $ref: '#/definitions/PoolListResponse'
  /v1/pools/{Id}:
    get:
      summary: Pool infos
      description: "Return pool infos and related links\n"
      parameters:
      - in: path
        name: Id
        schema:
          type: string
        required: true
        description: Identifier for the backend
      tags:
      - pools
      responses:
        '200':
          description: "Returns pool infos and related links\n"
          content:
            application/json:
              schema:
                $ref: '#/definitions/PoolInfos'
        '404':
          description: "The requested backends does not exists\n"
          content:
            application/json:
              schema:
                $ref: '#/definitions/ErrorResponse'
  /v1/pools/{Id}/backends:
    get:
      summary: Backends status
      description: "Return backend's pool status as\n"
      parameters:
      - in: path
        name: Id
        schema:
          type: string
        required: true
        description: Identifier for the backend
      tags:
      - pools
      responses:
        '200':
          description: "Returns all backend's status for that pool\n"
          content:
            application/json:
              schema:
                $ref: '#/definitions/PoolBackendsResponse'
        '404':
          description: "The requested backends does not exists\n"
          content:
            application/json:
              schema:
                $ref: '#/definitions/ErrorResponse'
  /v1/pools/{Id}/config:
    get:
      summary: Pool backends configuration
      description: "Returns pool backends configuration\n"
      parameters:
      - in: path
        name: Id
        schema:
          type: string
        required: true
        description: Identifier for the backend
      tags:
      - pools.config
      responses:
        '200':
          description: "Returns the backends configuration as json object\n"
          content:
            application/json:
              schema:
                $ref: '#/definitions/PoolBackendConfig'
        '404':
          description: "The requested backends does not exists\n"
          content:
            application/json:
              schema:
                $ref: '#/definitions/ErrorResponse'
        '502':
          description: "Backends are unavailables\n"
          content:
            application/json:
              schema:
                $ref: '#/definitions/ErrorResponse'
    put:
      summary: Set pool backends configuration
      description: "Set pool backends configuration and returns the configuration
        difference\n"
      parameters:
      - in: path
        name: Id
        schema:
          type: string
        required: true
        description: Identifier for the backend
      tags:
      - pools.config
      responses:
        '200':
          description: "The configuration has been applied with success and the configuration
            diff  is returned as json object\n"
          content:
            application/json:
              schema:
                type: object
        '404':
          description: "The requested backends does not exists\n"
          content:
            application/json:
              schema:
                $ref: '#/definitions/ErrorResponse'
        '400':
          description: "Invalid configuration input\n"
          content:
            application/json:
              schema:
                $ref: '#/definitions/ErrorResponse'
        '502':
          description: "Backends are unavailables\n"
          content:
            application/json:
              schema:
                $ref: '#/definitions/ErrorResponse'
  /v1/pools/{Id}/test:
    get:
      summary: Backend test
      description: "Send a test request\n"
      parameters:
      - in: path
        name: Id
        schema:
          type: string
        required: true
        description: Identifier for the backend
      - in: query
        schema:
          type: int
        required: true
        description: Delay in seconds to apply to backend response
      tags:
      - pools
      responses:
        '200':
          description: Test passed
          content:
            text/plain:
              schema:
                type: string
        '404':
          description: "The requested backends does not exists\n"
          content:
            application/json:
              schema:
                $ref: '#/definitions/ErrorResponse'
  /v1/pools/{Id}/catalog:
    get:
      summary: Get backend's projects catalog
      description: "Returns the list of all projects avaialables to the backend\n"
      parameters:
      - in: path
        name: Id
        schema:
          type: string
        required: true
        description: Identifier for the backend
      tags:
      - pools.cache
      responses:
        '200':
          description: "Returns the list of availables projects\n"
          content:
            application/json:
              schema:
                $ref: '#/definitions/CatalogResponse'
        '404':
          description: "The requested backends does not exists\n"
          content:
            application/json:
              schema:
                $ref: '#/definitions/ErrorResponse'
        '502':
          description: "Backends are unavailables\n"
          content:
            application/json:
              schema:
                $ref: '#/definitions/ErrorResponse'
  /v1/pools/{Id}/cache:
    get:
      summary: Get backend's cache content
      description: "Returns a consolidated view of the backend's cache content\n"
      parameters:
      - in: path
        name: Id
        schema:
          type: string
        required: true
        description: Identifier for the backend
      tags:
      - pools.cache
      responses:
        '200':
          description: "Returns the content of the cache\n"
          content:
            application/json:
              schema:
                $ref: '#/definitions/CacheContentResponse'
        '404':
          description: "The requested backends does not exists\n"
          content:
            application/json:
              schema:
                $ref: '#/definitions/ErrorResponse'
        '502':
          description: "Backends are unavailables\n"
          content:
            application/json:
              schema:
                $ref: '#/definitions/ErrorResponse'
    patch:
      summary: Synchronize cache
      description: "Synchronize and update cache between all backends\n"
      parameters:
      - in: path
        name: Id
        schema:
          type: string
        required: true
        description: Identifier for the backend
      tags:
      - pools.cache
      responses:
        '200':
          description: "Returns the content of the cache\n"
          content:
            application/json:
              schema:
                $ref: '#/definitions/CacheContentResponse'
        '404':
          description: "The requested backends does not exists\n"
          content:
            application/json:
              schema:
                $ref: '#/definitions/ErrorResponse'
        '502':
          description: "Backends are unavailables\n"
          content:
            application/json:
              schema:
                $ref: '#/definitions/ErrorResponse'
    put:
      summary: Pull/Update projects in cache for backend
      description: "Update requested projects for backend's cache\n"
      parameters:
      - in: path
        name: Id
        schema:
          type: string
        required: true
        description: Identifier for the backend
      tags:
      - pools.cache
      requestBody:
        desccription: The list of projects to pull/update
        required: true
        content:
          application/json:
            schema:
              $ref: '#/definitions/StringList'
      responses:
        '200':
          description: "Returns the content of the cache\n"
          content:
            application/json:
              schema:
                $ref: '#/definitions/CacheContentResponse'
        '404':
          description: "The requested backends does not exists\n"
          content:
            application/json:
              schema:
                $ref: '#/definitions/ErrorResponse'
        '502':
          description: "Backends are unavailables\n"
          content:
            application/json:
              schema:
                $ref: '#/definitions/ErrorResponse'
    delete:
      summary: Clear cache
      description: "Clear cache for backends\n"
      parameters:
      - in: path
        name: Id
        schema:
          type: string
        required: true
        description: Identifier for the backend
      tags:
      - pools.cache
      responses:
        '200':
          description: "Cache is cleared for all backends\n"
        '404':
          description: "The requested backends does not exists\n"
          content:
            application/json:
              schema:
                $ref: '#/definitions/ErrorResponse'
        '502':
          description: "Backends are unavailables\n"
          content:
            application/json:
              schema:
                $ref: '#/definitions/ErrorResponse'
  /v1/pools/{Id}/cache/project:
    get:
      summary: Get project's status cache
      description: "Returns the project's cache status\n"
      parameters:
      - in: path
        name: Id
        schema:
          type: string
        required: true
        description: Identifier for the backend
      - in: query
        name: uri
        schema:
          type: str
        description: The project uri
      tags:
      - pools.cache.project
      responses:
        '200':
          description: "Returns project's status\n"
          content:
            application/json:
              schema:
                $ref: '#/definitions/CacheItemPool'
        '400':
          description: "Missing uri in query string\n"
          content:
            application/json:
              schema:
                $ref: '#/definitions/ErrorResponse'
        '404':
          description: "The requested backends does not exists\n"
          content:
            application/json:
              schema:
                $ref: '#/definitions/ErrorResponse'
        '502':
          description: "Backends are unavailables\n"
          content:
            application/json:
              schema:
                $ref: '#/definitions/ErrorResponse'
    delete:
      summary: Remove project from cache
      description: "Returns the project's cache status\n"
      parameters:
      - in: path
        name: Id
        schema:
          type: string
        required: true
        description: Identifier for the backend
      - in: query
        name: uri
        schema:
          type: str
        description: The project uri/path
      tags:
      - pools.cache.project
      responses:
        '200':
          description: "Returns project's status\n"
          content:
            application/json:
              schema:
                $ref: '#/definitions/CacheItemPool'
        '400':
          description: "Missing uri in query string\n"
          content:
            application/json:
              schema:
                $ref: '#/definitions/ErrorResponse'
        '404':
          description: "The requested backends does not exists\n"
          content:
            application/json:
              schema:
                $ref: '#/definitions/ErrorResponse'
        '502':
          description: "Backends are unavailables\n"
          content:
            application/json:
              schema:
                $ref: '#/definitions/ErrorResponse'
    put:
      summary: Pull/Update single project in cache for backend
      description: "Update requested project for backend's cache\n"
      parameters:
      - in: path
        name: Id
        schema:
          type: string
        required: true
        description: Identifier for the backend
      - in: query
        name: uri
        schema:
          type: str
        description: The project uri/path
      tags:
      - pools.cache.project
      responses:
        '200':
          description: "Returns project's cache content\n"
          content:
            application/json:
              schema:
                $ref: '#/definitions/CacheContentResponse'
        '400':
          description: "Missing uri in query string\n"
          content:
            application/json:
              schema:
                $ref: '#/definitions/ErrorResponse'
        '404':
          description: "The requested backends does not exists\n"
          content:
            application/json:
              schema:
                $ref: '#/definitions/ErrorResponse'
        '502':
          description: "Backends are unavailables\n"
          content:
            application/json:
              schema:
                $ref: '#/definitions/ErrorResponse'
  /v1/pools/{Id}/cache/project/info:
    get:
      summary: Get project's infos
      description: "Returns detailed informations about the project, Note that the
        project must be in cache\n"
      parameters:
      - in: path
        name: Id
        schema:
          type: string
        required: true
        description: Identifier for the backend
      - in: query
        name: uri
        schema:
          type: str
        description: The project uri/path
      tags:
      - pools.cache.project
      responses:
        '200':
          description: "Returns project's status\n"
          content:
            application/json:
              schema:
                $ref: '#/definitions/ProjectInfo'
        '400':
          description: "Missing uri in query string\n"
          content:
            application/json:
              schema:
                $ref: '#/definitions/ErrorResponse'
        '404':
          description: "The requested backends does not exists\n"
          content:
            application/json:
              schema:
                $ref: '#/definitions/ErrorResponse'
        '502':
          description: "Backends are unavailables\n"
          content:
            application/json:
              schema:
                $ref: '#/definitions/ErrorResponse'
  /v1/pools/{Id}/plugins:
    get:
      summary: Get backend's plugins
      description: "Returns loaded plugins information in backends\n"
      parameters:
      - in: path
        name: Id
        schema:
          type: string
        required: true
        description: Identifier for the backend
      tags:
      - pools.plugins
      responses:
        '200':
          description: "Returns the plugin's informations\n"
          content:
            application/json:
              schema:
                $ref: '#/definitions/PluginListResponse'
        '404':
          description: "The requested backends does not exists\n"
          content:
            application/json:
              schema:
                $ref: '#/definitions/ErrorResponse'
        '502':
          description: "Backends are unavailables\n"
          content:
            application/json:
              schema:
                $ref: '#/definitions/ErrorResponse'
  /v1/config:
    patch:
      summary: Reload config
      description: "Reload config from external URL\n"
      tags:
      - config
      responses:
        '200':
          description: "The new configuration fragment has been retrieved and the
            actual configuration has been updated Returns the actual configuration\n"
          content:
            application/json:
              schema:
                type: object
        '403':
          description: "No configuration url is defined\n"
          content:
            application/json:
              schema:
                $ref: '#/definitions/ErrorResponse'
  /v1/watch:
    head:
      summary: Watch (websocket)
      description: "Open a websocket for monitoring backends\nstatus\n"
      tags:
      - healthcheck
      responses:
        '200':
          description: "Send backend's status changes over the web socket.\n"
          content:
            application/json:
              schema:
                $ref: '#/definitions/WatchResponse'
    get:
      summary: Watch (websocket)
      description: "Open a websocket for monitoring backends\nstatus\n"
      tags:
      - healthcheck
      responses:
        '200':
          description: "Send backend's status changes over the web socket.\n"
          content:
            application/json:
              schema:
                $ref: '#/definitions/WatchResponse'
definitions:
  ErrorResponse:
    properties:
      message:
        type: string
      details:
        anyOf:
        - type: object
        - type: 'null'
        default:
    required:
    - message
    title: ErrorResponse
    type: object
  BackendStatus:
    description: Pool backend status
    properties:
      address:
        type: string
      numWorkers:
        anyOf:
        - type: integer
        - type: 'null'
        default:
      requestPressure:
        anyOf:
        - type: number
        - type: 'null'
        default:
      status:
        enum:
        - ok
        - unavailable
        type: string
      stoppedWorkers:
        anyOf:
        - type: integer
        - type: 'null'
        default:
      workerFailurePressure:
        anyOf:
        - type: number
        - type: 'null'
        default:
      uptime:
        anyOf:
        - type: integer
        - type: 'null'
        default:
    required:
    - address
    - status
    type: object
  PoolBackendsResponse:
    properties:
      label:
        type: string
      address:
        type: string
      backends:
        items:
          $ref: '#/definitions/BackendStatus'
        type: array
    required:
    - label
    - address
    - backends
    title: PoolBackendsResponse
    type: object
  Link:
    properties:
      href:
        format: uri
        minLength: 1
        title: Href
        type: string
      rel:
        title: Rel
        type: string
      mimeType:
        anyOf:
        - type: string
        - type: 'null'
        default:
        title: Mimetype
      title:
        default: ''
        title: Title
        type: string
      description:
        anyOf:
        - type: string
        - type: 'null'
        default:
        title: Description
      length:
        anyOf:
        - type: integer
        - type: 'null'
        default:
        title: Length
      templated:
        default: false
        title: Templated
        type: boolean
      hreflang:
        anyOf:
        - type: string
        - type: 'null'
        default:
        title: Hreflang
    required:
    - href
    - rel
    title: Link
    type: object
  PoolInfos:
    properties:
      label:
        title: Label
        type: string
      address:
        title: Address
        type: string
      backends:
        items:
          type: string
        title: Backends
        type: array
      title:
        title: Title
        type: string
      description:
        anyOf:
        - type: string
        - type: 'null'
        title: Description
      links:
        items:
          $ref: '#/definitions/Link'
        title: Links
        type: array
    required:
    - label
    - address
    - backends
    - title
    - description
    - links
    title: PoolInfos
    type: object
  PoolListResponse:
    items:
      $ref: '#/definitions/PoolInfos'
    type: array
  PoolBackendConfig:
    properties:
      label:
        type: string
      address:
        type: string
      config:
        type: object
      env:
        type: object
    required:
    - label
    - address
    - config
    - env
    title: PoolBackendConfig
    type: object
  PoolSetConfigResponse:
    properties:
      label:
        type: string
      address:
        type: string
      diff:
        type: object
    required:
    - label
    - address
    - diff
    title: PoolSetConfigResponse
    type: object
  CacheItem:
    properties:
      inCache:
        title: Incache
        type: boolean
      lastModified:
        format: date-time
        title: Lastmodified
        type: string
      name:
        title: Name
        type: string
      savedVersion:
        title: Savedversion
        type: string
      status:
        title: Status
        type: string
      storage:
        title: Storage
        type: string
      uri:
        title: Uri
        type: string
      debugMetadata:
        anyOf:
        - additionalProperties:
            type: string
          type: object
        - type: 'null'
        title: Debugmetadata
      timestamp:
        title: Timestamp
        type: integer
      lastHit:
        title: Lasthit
        type: integer
      hits:
        title: Hits
        type: integer
    required:
    - inCache
    - lastModified
    - name
    - savedVersion
    - status
    - storage
    - uri
    - debugMetadata
    - timestamp
    - lastHit
    - hits
    title: CacheItem
    type: object
  CacheItemPool:
    properties:
      pool:
        additionalProperties:
          $ref: '#/definitions/CacheItem'
        title: Pool
        type: object
      links:
        items:
          $ref: '#/definitions/Link'
        title: Links
        type: array
    required:
    - pool
    - links
    title: CacheItemPool
    type: object
  StringList:
    items:
      type: string
    type: array
  CatalogItem:
    properties:
      lastModified:
        format: date-time
        title: Lastmodified
        type: string
      name:
        title: Name
        type: string
      publicUri:
        title: Publicuri
        type: string
      storage:
        title: Storage
        type: string
      uri:
        title: Uri
        type: string
    required:
    - lastModified
    - name
    - publicUri
    - storage
    - uri
    title: CatalogItem
    type: object
  CatalogResponse:
    items:
      $ref: '#/definitions/CatalogItem'
    type: array
  CacheContentResponse:
    additionalProperties:
      $ref: '#/definitions/CacheItemPool'
    type: object
  PluginInfo:
    properties:
      name:
        title: Name
        type: string
      path:
        format: path
        title: Path
        type: string
      pluginType:
        title: Plugintype
        type: string
      metadata:
        contentMediaType: application/json
        contentSchema: {}
        title: Metadata
        type: string
    required:
    - name
    - path
    - pluginType
    - metadata
    title: PluginInfo
    type: object
  PluginListResponse:
    items:
      $ref: '#/definitions/PluginInfo'
    type: array
  LayerInfos:
    properties:
      layerId:
        title: Layerid
        type: string
      name:
        title: Name
        type: string
      source:
        title: Source
        type: string
      crs:
        title: Crs
        type: string
      isValid:
        title: Isvalid
        type: boolean
      isSpatial:
        title: Isspatial
        type: boolean
    required:
    - layerId
    - name
    - source
    - crs
    - isValid
    - isSpatial
    title: LayerInfos
    type: object
  ProjectInfo:
    properties:
      status:
        title: Status
        type: string
      uri:
        title: Uri
        type: string
      filename:
        title: Filename
        type: string
      crs:
        title: Crs
        type: string
      lastModified:
        title: Lastmodified
        type: string
      storage:
        title: Storage
        type: string
      hasBadLayers:
        title: Hasbadlayers
        type: boolean
      layers:
        items:
          $ref: '#/definitions/LayerInfos'
        title: Layers
        type: array
      cacheId:
        title: Cacheid
        type: string
      serverAddress:
        title: Serveraddress
        type: string
    required:
    - status
    - uri
    - filename
    - crs
    - lastModified
    - storage
    - hasBadLayers
    - layers
    - cacheId
    - serverAddress
    title: ProjectInfo
    type: object
  WatchResponse:
    properties:
      label:
        title: Label
        type: string
      address:
        title: Address
        type: string
      backend_status:
        additionalProperties:
          type: boolean
        title: Backend Status
        type: object
    required:
    - label
    - address
    - backend_status
    title: WatchResponse
    type: object
tags:
- description: Manage pools
  name: pools
- description: Manage pool's configuration
  name: pools.config
- description: Manage pool's cache
  name: pools.cache
- description: Manage project in cache
  name: pools.cache.project
- description: Manage pool's plugins
  name: pools.plugins
info:
  title: Py-Qgis services admin
  description: Manage Py-Qgis services clusters
  version: v1
