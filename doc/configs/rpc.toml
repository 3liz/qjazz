

[logging]
level = "INFO"


[worker]
#
# Name of the worker instance
name = "default"
#
# Description
#
# Description for administrative purpose
description = ""
#
# Max number of concurrent requests
#
# The maximum number of requests that can be
# queued for this worker task. If the number of
# waiting requests reach the limit, the subsequent
# requests will be returned with a `service unavailable`
# error
max_waiting_requests = 20
#
# Stalled process timeout
#
# Set the amount of time in seconds before considering
# considering that a process is stalled.
# A stalled process will be terminated and the server will
# exit with an error code
process_timeout = 20
#
# Process grace period
#
# The grace period to apply on worker timeout
# when attempting to cancel the actual request
process_grace_period = 3
#
# Shutdown grace period
#
# The maximum amount of time to wait before
# closing connections. During this period,
# no new connections are allowed.
shutdown_grace_period = 20
#
# Max allowed processes failure ratio
#
# The maximum ratio of terminated/initial processes
# allowed. If this limit is reached,  the server will
# issue a critical failure before exiting.
max_processes_failure_pressure = 0.0
#
# Number of Qgis processes
#
# Set the number of Qgis processes per worker.
# If a processes crash, the worker is in a degraded
# state. When the last process exit the worker will
# stop with an error code.
# 
# In order not to let the worker degrade itself slowly
# the number of worker should be kept low (from 1 to 3)
# or keep a relatively low 'max_processes_failure_pressure'.
# Note: server must be restarted if this option is modified.
num_processes = 1
#
# Rescale period
#
# Set the interval in seconds between rescaling of the number of
# live processes.
# Scaling will adjust the number of processes according 
# to the configuration and dead processes will be replaced
# with new processes.
rescale_period = 5

#
# Interfaces to listen to
#
[[worker.interfaces]]
#
# TCP:PORT interface or unix socket
listen = ["[::]",23456]
use_ssl = false
ssl = "cafile=None certfile=None keyfile=None"

#
# Qgis process configuration
#
[worker.config]
#
# Projects configuration
#
# Projects and cache configuration
projects = "trust_layer_metadata=False disable_getprint=False force_readonly_layers=True ignore_bad_layers=False disable_advertised_urls=False search_paths={} allow_direct_path_resolution=True handlers={}"
#
# Max number of projects in cache
#
# The maximum number of projects allowed in cache.
# The default value is set to 50 projects. 
max_projects = 50
#
# Load project in cache when requested
#
# Load project in cache at request.
# If set to 'false', project not loaded in cache will
# return a 403 HTTP code when requested.
# Thus, adding project's to cache will require a specific
# action from another service or admininstrative
# management tools.
load_project_on_request = true
#
# Reload outdated project when requested
#
# Reload outdated project at request.
# If set to 'false', outdated project in cache will
# not be refreshed when requested.
# Thus, refreshing project's to cache will require a specific
# action from another service or admininstrative
# management tools.
reload_outdated_project_on_request = false
#
# Plugins configuration
plugins = "paths=[PosixPath('/home/david/.qgis-server/plugins')] install=None install_mode='external' enable_scripts=True extra_builtin_providers=set() plugin_manager=PosixPath('/usr/local/bin/qgis-plugin-manager')"
#
# Maximum chunk size
#
# Set the maximum chunk size for streamed responses.
max_chunk_size = 1048576
#
# Qgis settings
#
# Qgis settings override.
# Use the syntax '<section>/<path>' for keys.
# Not that values defined here will override those
# from QGIS3.ini file.
qgis_settings = {}
#
# Ignore INT signal in worker
#
# Ignore INT signal in workers.
# This is useful when you don't want
# propagating signal from parent process.
ignore_interrupt_signal = true


# Bootstrap configuration from remote location.
# The configuration is fetched from the remote url
# at startup and override all local settings.
[worker_config_url]
#
# External configuration Url
#
# Url to external configuration.
# The server will issue a GET method against this url at startup.
# The method should returns a valid configuration fragment.
#url =   	# Optional

#
[worker_config_url.ssl]
#
# CA file
#cafile =   	# Optional
#
# SSL/TLS  key
#
# Path to the SSL key file
#certfile =   	# Optional
#
# SSL/TLS Certificat
#
# Path to the SSL certificat file
#keyfile =   	# Optional


# Bootstrap configuration from remote location.
# The configuration is fetched from the remote url
# at startup and override all local settings.
[restore_cache]
#
# External configuration Url
#
# Url to external configuration.
# The server will issue a GET method against this url at startup.
# The method should returns a valid configuration fragment.
#url =   	# Optional

#
[restore_cache.ssl]
#
# CA file
#cafile =   	# Optional
#
# SSL/TLS  key
#
# Path to the SSL key file
#certfile =   	# Optional
#
# SSL/TLS Certificat
#
# Path to the SSL certificat file
#keyfile =   	# Optional

